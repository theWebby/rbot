/** CopyrightÂ© 2015 - 2016, Accusoft Corporation. All rights reserved.
 *  @file ocrxpress.h
 */

#ifndef OCRXPRESS_H
#define OCRXPRESS_H

#define OCRX_ERROR_CODE_LENGTH 128
#define OCRX_ERROR_DETAILS_LENGTH 512

#include <stdint.h>

#ifdef _WIN32
  /* Windows */
  #if defined(LIBOCRX_EXPORTS)
    #define OCRX_API __declspec(dllexport)
  #elif defined(LIBOCRX_IMPORTS)
    #define OCRX_API __declspec(dllimport)
  #else
    #define OCRX_API
  #endif
#else
  /* *nix */
  #define OCRX_API
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifndef OCRX_CALL
#   if defined(WIN32)
#       define OCRX_CALL __cdecl
#   else
#       define OCRX_CALL
#   endif
#endif

/** Supported output file formats.
 *
 */
typedef enum tagOCRX_FileFormat {
    OCRX_FileFormat_PDF, /**< Portable Document Format. */
    OCRX_FileFormat_Text /**< Plain text. */
} OCRX_FileFormat;

/** File modes for output.
 *
 */
typedef enum tagOCRX_FileMode {
    OCRX_FileMode_Append, /**< Append or create. */
    OCRX_FileMode_Overwrite /**< Overwrite or create. */
} OCRX_FileMode;

/** Supported languages.
 *
 */
typedef enum tagOCRX_Language {
    OCRX_Language_English,
    OCRX_Language_Arabic,
    OCRX_Language_Bulgarian,
    OCRX_Language_Catalan,
    OCRX_Language_Chinese_Simplified,
    OCRX_Language_Chinese_Traditional,
    OCRX_Language_Croatian,
    OCRX_Language_Czech,
    OCRX_Language_Danish,
    OCRX_Language_Danish_Fraktur,
    OCRX_Language_Dutch,
    OCRX_Language_German,
    OCRX_Language_German_Fraktur,
    OCRX_Language_Greek,
    OCRX_Language_Finnish,
    OCRX_Language_French,
    OCRX_Language_Hebrew,
    OCRX_Language_Hindi,
    OCRX_Language_Hungarian,
    OCRX_Language_Indonesian,
    OCRX_Language_Italian,
    OCRX_Language_Japanese,
    OCRX_Language_Korean,
    OCRX_Language_Latvian,
    OCRX_Language_Lithuanian,
    OCRX_Language_Norwegian,
    OCRX_Language_Polish,
    OCRX_Language_Portuguese,
    OCRX_Language_Romanian,
    OCRX_Language_Russian,
    OCRX_Language_Serbian,
    OCRX_Language_Slovak,
    OCRX_Language_Slovak_Fraktur,
    OCRX_Language_Slovenian,
    OCRX_Language_Spanish,
    OCRX_Language_Swedish,
    OCRX_Language_Tagalog,
    OCRX_Language_Thai,
    OCRX_Language_Turkish,
    OCRX_Language_Ukrainian,
    OCRX_Language_Vietnamese
} OCRX_Language;

/** Supported Page Orientations.
 *
 */
typedef enum tagOCRX_PageOrientation {
    OCRX_PageOrientation_Detect,   // Detect the page orientation
    OCRX_PageOrientation_Reorient, // Detect and reorient page to upright.
    OCRX_PageOrientation_Upright   // No orientation detection. Page is already Upright.
} OCRX_PageOrientation;


/** Result object types.
 *
 */
typedef enum tagOCRX_ResultType {
    OCRX_ResultType_Document,
    OCRX_ResultType_Page,
    OCRX_ResultType_Region,
    OCRX_ResultType_TextBlock,
    OCRX_ResultType_TextLine,
    OCRX_ResultType_Word,
    OCRX_ResultType_Character
} OCRX_ResultType;

/** Return status codes.
 *
 */
typedef enum tagOCRX_StatusCode {
    OCRX_StatusCode_OK,
    OCRX_StatusCode_Error
} OCRX_StatusCode;

/** Rectangle.
 *  A rectangular area on a page.
 */
typedef struct tagOCRX_Rectangle {
    int32_t Left; /**< The x-coordinate, in pixels, of the left side. */
    int32_t Top; /**< The y-coordinate, in pixels, of the top side. */
    int32_t Right; /**< The x-coordinate, in pixels, of the right side. */
    int32_t Bottom; /**< The y-coordinate, in pixels, of the bottom side. */
} OCRX_Rectangle;

/** Recognition parameters.
 *  These control how recognition if performed.
 */
typedef struct tagOCRX_RecognitionParameters {
    OCRX_Language Language; /**< Language to recognize. */
    OCRX_PageOrientation PageOrientation; /**< Page Orientation to recognize. */
    int32_t DefaultXDPI; /** Default X resolution in DPI */
    int32_t DefaultYDPI; /** Default Y resolution in DPI */
} OCRX_RecognitionParameters;

/** Default recognition parameters.
 *  An instance of the recognition parameters initialized to the default values.
 */
OCRX_API extern const OCRX_RecognitionParameters OCRX_DefaultRecognitionParameters;

/** Status returned by OcrXpress API functions.
 *
 */
typedef struct tagOCRX_Status {
    OCRX_StatusCode StatusCode;
    char ErrorCode[OCRX_ERROR_CODE_LENGTH];
    char ErrorDetails[OCRX_ERROR_DETAILS_LENGTH];
} OCRX_Status;

#ifndef OCRX_NO_API_FUNCTIONS

/** OCR result.
 *  The OCR data returned by recognition.
 */
typedef intptr_t OCRX_Result;

/** Sets the solution name for licensing.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_set_solution_name(
    const char* solutionName /**< [in] Solution name. */
);

/** Sets the solution key for licensing.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_set_solution_key(
    const int32_t key1, /**< [in] First part of the key. */
    const int32_t key2, /**< [in] Second part of the key. */
    const int32_t key3, /**< [in] Third part of the key. */
    const int32_t key4 /**< [in] Fourth part of the key. */
);

/** Sets the OEM license key.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_set_oem_license_key(
    const char* oemLicenseKey /**< [in] OEM license key. */
);

/** Recognizes an image and returns the result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_recognize_to_memory(
    const OCRX_RecognitionParameters params, /**< [in] Parameters with which to perform recognition. */
    const intptr_t dib, /**< [in] Image on which to perform recognition. */
    OCRX_Result* documentResult /**< [out] Document result from recognition. */
);

/** Recognizes an image and outputs the result to file.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_recognize_to_file(
    const OCRX_RecognitionParameters params, /**< [in] Parameters with which to perform recognition. */
    const intptr_t dib, /**< [in] Image on which to perform recognition. */
    const OCRX_FileFormat format, /**< [in] File format to output. */
    const OCRX_FileMode mode, /**< [in] File mode for the output. */
    const char* filePath /**< [in] Output file path. */
);

/** Recognizes an image, outputs the result to file, and returns the result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_recognize_to_file_and_memory(
    const OCRX_RecognitionParameters params, /**< [in] Parameters with which to perform recognition. */
    const intptr_t dib, /**< [in] Image on which to perform recognition. */
    const OCRX_FileFormat format, /**< [in] File format to output. */
    const OCRX_FileMode mode, /**< [in] File mode for the output. */
    const char* filePath, /**< [in] Output file path. */
    OCRX_Result* documentResult /**< [out] Document result from recognition. */
);

/** Gets the count of descendant results of the specified type for a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_descendant_result_count(
    const OCRX_Result result, /**< [in] Result for which to get the descendant result count. */
    const OCRX_ResultType descendantResultType, /**< [in] Type of descendant result for which to retrieve the count. */
    int32_t* resultCount /**< [out] Retrieved descendant result count. */
);

/** Gets a descendant result of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_descendant_result(
    const OCRX_Result result, /**< [in] Result for which to retrieve a descendant. */
    const OCRX_ResultType descendantResultType, /**< [in] Type of descendant result to retrieve. */
    const int32_t descendantResultIndex, /**< [in] Zero-based index of the descendant result to retrieve. */
    OCRX_Result* descendantResult /**< [out] Retrieved descendant result. */
);

/** Gets an ancestor result of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_ancestor_result(
    const OCRX_Result result, /**< [in] Result for which to retrieve an ancestor. */
    const OCRX_ResultType ancestorResultType, /**< [in] Type of ancestor result to retrieve. */
    OCRX_Result* ancestorResult /**< [out] Retrieved ancestor result. */
);

/** Gets the size, in bytes, of the text contained by a given result in UTF-8 format.
 *  A byte for null termination is included in the size calculation.
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_utf8_text_size(
    const OCRX_Result result, /**< [in] Result for which to get text. */
    int32_t* textSize /**< [out] Size of the text. */
);

/** Gets the text contained by a given result in UTF-8 format.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_utf8_text(
    const OCRX_Result result, /**< [in] Result for which to get text. */
    char* textBuffer, /**< [out] Buffer in which to place the retrieved text. */
    int32_t textBufferSize /**< [in] Size of the buffer. */
);

/** Gets the area of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_area(
    const OCRX_Result result, /**< [in] Result for which to get the area. */
    OCRX_Rectangle* area /**< [out] Retrieved area. */
);

/** Gets the confidence of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_confidence(
    const OCRX_Result result, /**< [in] Result for which to get the confidence. */
    int32_t* confidence /**< [out] Retrieved confidence. */
);

/** Gets the orientation of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_orientation(
    const OCRX_Result result, /**< [in] Result for which to get the orientation. */
    int32_t* orientation /**< [out] Retrieved orientation. */
);

/** Gets the type of a given result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_get_result_type(
    const OCRX_Result result, /**< [in] Result for which to get the type. */
    OCRX_ResultType* resultType /**< [out] Retrieved result type. */
);

/** Frees a document result.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_free_document_result(
    OCRX_Result* documentResult /**< [in, out] Document result to free. */
);

/** Read DIB from file.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_load_file(
    const char* filePath, /**< [in] Input file path. */
    intptr_t* dib /**< [out] DIB retrieved from file. */
);

/** Frees a DIB.
 *
 */
OCRX_API OCRX_Status OCRX_CALL OCRX_free_dib(
    const intptr_t dib /**< [in] DIB to free. */
);

#endif

#ifdef __cplusplus
} //extern "C" {
#endif

#endif // OCRXPRESS_H
