#include <nan.h>
#include "asyncworkers.h"

namespace ocrxpress {

    void RecognizeWorker::Execute() {
        recognize();
        if(isOcrxError(status))
            SetErrorMessage("");
    }

    void RecognizeWorker::HandleOKCallback() {
        Nan::HandleScope scope;

        auto resultObject = Nan::New<v8::ObjectTemplate>(resultClass)->NewInstance();
        fillResultObject(parentRefCount, resultObject, parentDocument, OCRX_ResultType_Document);

        v8::Local<v8::Value> argv[] = { Nan::Undefined(), resultObject };
        callback->Call(2, argv);
    }

    void RecognizeWorker::HandleErrorCallback() {
        auto error = createError("recognize", status);
        v8::Local<v8::Value> argv[] = { error };
        callback->Call(1, argv);
    }

    void RecognizeWorker::recognize() {
        intptr_t dib = 0;

        status = OCRX_load_file(inputFile.c_str(), &dib);
        if (isOcrxError(status)) return;

        if (outputFile.length()==0)
        {
            status = OCRX_recognize_to_memory(recognitionParams, dib, &parentDocument);
        }
        else
        {
            status = OCRX_recognize_to_file_and_memory(recognitionParams, dib, fileFormat, fileMode, outputFile.c_str(), &parentDocument);
        }
        OCRX_free_dib(dib);
    }
}
