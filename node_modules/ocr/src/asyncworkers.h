#ifndef ASYNCWORKERS_H
#define ASYNCWORKERS_H

#include <nan.h>
#include <v8.h>

#include "util.h"
#include "ocrxpress.h"

namespace ocrxpress {

        class RecognizeWorker : public Nan::AsyncWorker {
        public:
        RecognizeWorker(const OCRX_RecognitionParameters *params, const std::string &inputFile,
                        OCRX_FileFormat format, OCRX_FileMode mode, const std::string &outputFile,
                        OCRX_Result parentDocument, int *parentRefCount, Nan::Callback *callback) :
                Nan::AsyncWorker(callback), recognitionParams(*params), inputFile(inputFile), fileFormat(format), fileMode(mode), outputFile(outputFile),
                        parentDocument(parentDocument), parentRefCount(parentRefCount) { }

                ~RecognizeWorker() { delete callback; }

                void Execute();
                void HandleOKCallback();
                void HandleErrorCallback();
                void SetError(OCRX_StatusCode code, char *errorCode, char *errorDetails);

        private:
                OCRX_RecognitionParameters recognitionParams;
                std::string inputFile;
                OCRX_FileFormat fileFormat;
                OCRX_FileMode fileMode;
                std::string outputFile;
                OCRX_Result parentDocument;
                int *parentRefCount;
                OCRX_Status status;

                void recognize();
        };

}

#endif
