#ifndef UTIL_H
#define UTIL_H

#include <string>
#include <nan.h>
#include "ocrxpress.h"

namespace ocrxpress {
	typedef v8::Local<v8::Value> ErrorType;
	ErrorType createError(const std::string &errorContext, OCRX_Status status);
	ErrorType createError(const std::string &errorMessage);
	bool isOcrxError(OCRX_Status status);

	extern Nan::Persistent<v8::ObjectTemplate> resultClass;

	void fillResultObject(int *refCount, const v8::Local<v8::Object>& resultObject, const OCRX_Result result, const OCRX_ResultType resultType);

	// This class contains some basic information that will be stored behind the scenes
	// for each result object created & returned to the user
	struct ResultObjectInfo {
		Nan::Persistent<v8::Object> resultObject;
		OCRX_Result result;
		OCRX_ResultType resultType;
		int *refCount;
		bool isRoot;
	};

	template<typename From, typename To>
		bool convertProperty(const From& from, To& to, ErrorType& error);
	template<typename Type>
		bool getProperty(v8::Local<v8::Object> obj, const char* paramName, Type& retParam, ErrorType& error);
	template<typename Type>
		bool getProperty(v8::Local<v8::Object> obj, const char* paramName, Type& retParam);

	bool getLanguageFromString(const std::string &language, OCRX_Language &retLanguage, ErrorType &error);
	bool getPageOrientationFromString(const std::string &pageOrientation, OCRX_PageOrientation &retOrientation, ErrorType &error);
	bool getFileFormatFromString(const std::string &fileFormat, OCRX_FileFormat &retFormat, ErrorType &error);
	bool getFileModeFromString(const std::string &fileMode, OCRX_FileMode &retMode, ErrorType &error);
	std::string getField(v8::Local<v8::Object> obj, const char *fieldName, const std::string &defaultValue);
	int getField(v8::Local<v8::Object> obj, const char *fieldName, const int defaultValue);
}

#endif
